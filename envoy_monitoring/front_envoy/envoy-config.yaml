tracing:
  http:
    name: "envoy.zipkin"
    config:
      collector_cluster: zipkin
      collector_endpoint: "/api/v1/spans"

admin:
  access_log_path: "/tmp/admin_access.log"
  address: 
    socket_address: 
      address: "127.0.0.1"
      port_value: 9901
stats_sinks:
  - name: "envoy.statsd"
    config:
      tcp_cluster_name: "statsd-exporter"
      prefix: front-envoy    
static_resources: 
  listeners:
    - name: "http_listener"
      address: 
        socket_address: 
          address: "0.0.0.0"
          port_value: 10000
      filter_chains:
          filters: 
            - name: "envoy.http_connection_manager"
              config:
                tracing:
                  operation_name: egress
                use_remote_address: true
                add_user_agent: true
                # access_log:
                # - name: envoy.file_access_log
                #   config:
                #     path: /dev/stdout
                #     format: "[ACCESS_LOG][%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n"
                stat_prefix: "ingress_443"
                codec_type: "AUTO"
                generate_request_id: true
                route_config: 
                  name: "local_route"
                  virtual_hosts: 
                    - name: "http-route"
                      domains: 
                      - "*"
                      # rate_limits:
                      #   - stage: 0
                      #     actions:
                      #       - generic_key: 
                      #           descriptor_value: "global"
                      routes:
                        - match:
                            prefix: "/request2"
                          route:
                            cluster: "service_d" 
                        - match: 
                            prefix: "/request1"
                          route:
                            cluster: "service_a"
                            # include_vh_rate_limits: true
                            # rate_limits:
                              # - actions:
                              #   - destination_cluster: {}
                              # - actions:
                              #     - generic_key:
                              #         descriptor_value: "service_c"
                              # - actions:
                              #     - header_value_match:
                              #         descriptor_value: "get"
                              #         headers: 
                              #           - name: ":method"
                              #             prefix_match: "GET" 
                              # - actions:  #This will be triggered if `X-CustomHeader` is present AND the X-CustomPlan header has a value of either BASIC or PLUS
                              #   - requestHeaders:
                              #       descriptor_key: "custom_header"
                              #       header_name: "X-CustomHeader"
                              #   - requestHeaders:
                              #       descriptor_key: "plan"
                              #       header_name: "X-CustomPlan" 
                              # - actions:
                              #   - header_value_match:
                              #       descriptor_value: "123"
                              #       headers: 
                              #         - name: "X-MyHeader"
                              #           prefix_match: "123"
                              # - actions:
                              #   - header_value_match:
                              #       descriptor_value: "456"
                              #       headers: 
                              #         - name: "X-MyHeader"
                              #           prefix_match: "456"
                              # - actions:
                              #   - header_value_match:
                              #       descriptor_value: "post"
                              #       headers: 
                              #         - name: ":method"
                              #           prefix_match: "POST"
                http_filters:
                - name: envoy.rate_limit
                  config:
                    domain: apis
                    failure_mode_deny: false
                    rate_limit_service:
                      grpc_service:
                        envoy_grpc:
                          cluster_name: rate_limit_cluster
                        timeout: 0.25s
                - name: envoy.router
                  config: {}
  clusters:
    - name: "statsd-exporter"
      connect_timeout: "0.25s"
      type: "strict_dns"
      lb_policy: "ROUND_ROBIN"
      hosts:
        - socket_address:
            address: "statsd_exporter"
            port_value: 9125
    - name: "service_a"
      connect_timeout: "0.25s"
      type: "strict_dns"
      lb_policy: "ROUND_ROBIN"
      hosts:
        - socket_address: 
            address: "service_a_envoy"
            port_value: 8786

    - name: "service_d"
      connect_timeout: "0.25s"
      type: "strict_dns"
      lb_policy: "ROUND_ROBIN"
      hosts:
        - socket_address: 
            address: "service_d_envoy"
            port_value: 8796

    - name: "rate_limit_cluster"
      type: "strict_dns"
      connect_timeout: 0.25s
      lb_policy: "ROUND_ROBIN"
      http2_protocol_options: {}
      hosts:
      - socket_address:
          address: "ratelimit"
          port_value: 8081

    - name: "zipkin"
      connect_timeout: 0.25s
      type: strict_dns
      lb_policy: "ROUND_ROBIN"
      hosts:
      - socket_address:
          address: zipkin
          port_value: 9411
